"""
### **Exerc√≠cio: Verifica√ß√£o de N√∫mero Primo**  

Crie uma **fun√ß√£o em Python** que verifica se um n√∫mero √© primo.  

#### **Requisitos:**  
1. O programa deve solicitar um n√∫mero inteiro positivo ao usu√°rio.  
2. A fun√ß√£o deve retornar **True** se o n√∫mero for primo e **False** caso contr√°rio.  
3. O programa deve exibir uma mensagem informando se o n√∫mero √© primo ou n√£o.  

#### **Exemplo de Entrada e Sa√≠da:**  
```
Digite um n√∫mero: 7
7 √© um n√∫mero primo!
```
```
Digite um n√∫mero: 10
10 n√£o √© um n√∫mero primo.
```

üí° **Dica:** Um n√∫mero √© primo se for maior que 1 e **divis√≠vel apenas por 1 e por ele mesmo**.  

Tente resolver! Se precisar de ajuda, estou aqui. üöÄ
"""

from math import sqrt

def is_prime_number(num):
    if num < 2:
        return f"O N√∫mero {num} n√£o √© primo"
    
    for i in range(2, (int(sqrt(num)) + 1)): 
        if num % i == 0:
            return f"O N√∫mero {num} n√£o √© primo"

    return f"O N√∫mero {num} √© primo"

print("\033[38;5;136m------- N√∫meros Primos -------\033[m")

num = input("Informe um algarismo para verificar se ele √© um n√∫mero primo: ")

if num.isdigit():
    num = int(num)
    print(is_prime_number(num))
else:
    print("\033[91mErro: Digite apenas n√∫meros inteiros.\033[m")

print("\033[38;5;136m------- Carros -------\033[m")

def save_car(model, year, mark, plate):
    return f"Carro: {model}/{year}/{mark}/{plate}"

print(save_car("Modelo: Palio", "Ano: 2004", "Marca: Fiat", "Placa: 2345671"))